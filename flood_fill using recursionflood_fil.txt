Msc AI & ML(sem-2)
NAME: Siddharth Lakkad
ROLL NO: 02(DS)
Sub: computer vision 
Department Of Computer Science Gujarat Uni
*********************************************************************************************************************************
flood_fill using recursion

import numpy as np
import cv2 as cv

def flood_fill(img,i,j,fill_value):
    if i<0 or i>=img.shape[0] or y<0 or y>=img.shape[1]:
        return img
    if img[i,j]!=fill_value:
        img[i,j]=fill_value
        img=flood_fill(img,x-1,y,fill_value)
        img=flood_fill(img,x+1,y,fill_value)
        img=flood_fill(img,x,y-1,fill_value)
        img=flood_fill(img,x,y+1,fill_value)
    return img

flood_fill with queue

import numpy as np
import cv2 as cv


def flood_fill(img,x,y,fill_value):
    h=img.shape[0]
    w=img.shape[1]
    
    visited=np.zeros((h,w),dtypr=np.bool)
    queue=[(x,y)]
    while len(queue)>0:
        x,y=queue.pop(0)
        if visited[x,y]:
            continue
        visited[x,y]=True
        img[x,y]=fill_value
        if x>0 and not visited and img[x-1,y]==img[x,y]:
            queue.append((x-1,y))
        if x < h - 1 and not visited[x + 1, y] and img[x + 1, y] == img[x, y]:
            queue.append((x + 1, y))
        if y > 0 and not visited[x, y - 1] and img[x, y - 1] == img[x, y]:
            queue.append((x, y - 1))
        if y < w - 1 and not visited[x, y + 1] and img[x, y + 1] == img[x, y]:
            queue.append((x, y + 1))
    return img